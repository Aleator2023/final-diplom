import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { UserDocument } from '../schemas/user.schema';
import { Reservation } from '../schemas/reservation.schema';
import { ReservationDto, ReservationSearchOptions, IReservation } from './reservation-interfaces';

@Injectable()
export class ReservationsService implements IReservation {
  constructor(@InjectModel(Reservation.name) private reservationModel: Model<Reservation>) {}

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async addReservation(data: ReservationDto): Promise<Reservation> {
    const { roomId, dateStart, dateEnd, hotelId, userId } = data;
  
    console.log("üì• –î–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", { hotelId, roomId, userId, dateStart, dateEnd });
  
    const start = new Date(dateStart).getTime();
    const end = new Date(dateEnd).getTime();
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    const conflictingReservation = await this.reservationModel.findOne({
      room: new Types.ObjectId(roomId), // ‚úÖ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ roomId - ObjectId
      $or: [
        { dateStart: { $lt: end, $gte: start } },
        { dateEnd: { $gt: start, $lte: end } },
        { dateStart: { $lte: start }, dateEnd: { $gte: end } },
      ],
    });
  
    if (conflictingReservation) {
      throw new ConflictException('–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã');
    }
  
    try {
      const newReservation = await this.reservationModel.create({
        hotel: new Types.ObjectId(hotelId), // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º hotelId –∫ ObjectId
        room: new Types.ObjectId(roomId), // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º roomId –∫ ObjectId
        userId: new Types.ObjectId(userId), // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º userId –∫ ObjectId
        dateStart,
        dateEnd,
      });
  
      console.log("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:", newReservation);
      return newReservation;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      throw new NotFoundException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
  async removeReservation(id: string): Promise<void> {
    const result = await this.reservationModel.findByIdAndDelete(id); 
    if (!result) {
      throw new NotFoundException('Reservation not found');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

  async getReservations(filter?: ReservationSearchOptions): Promise<Array<any>> {
    try {
      const query = this.reservationModel.find();
  
      if (filter?.userId) {
        if (!Types.ObjectId.isValid(filter.userId)) {
          throw new NotFoundException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId');
        }
        query.where('userId').equals(new Types.ObjectId(filter.userId));
      }
  
      if (filter?.dateStart) {
        query.where('dateEnd').gte(new Date(filter.dateStart).getTime());
      }
      if (filter?.dateEnd) {
        query.where('dateStart').lte(new Date(filter.dateEnd).getTime());
      }
  
      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `populate('userId')`, –∑–∞–≥—Ä—É–∂–∞–µ–º `name` –∏ `surname`
      const reservations = await query
        .populate('hotel')
        .populate('room')
        .populate('userId', 'name surname') // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        .exec();
  
      // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º userId –∫ `UserDocument`
      return reservations.map((reservation) => ({
        id: (reservation._id as Types.ObjectId).toHexString(),
        user: reservation.userId
          ? {
              name: ((reservation.userId as unknown) as UserDocument).name,
            }
          : { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', surname: '' },
        hotel: reservation.hotel,
        room: reservation.room,
        dateStart: reservation.dateStart,
        dateEnd: reservation.dateEnd,
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      throw new NotFoundException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');
    }
  }
}