import { useEffect, useState } from 'react';
import io from 'socket.io-client';
import axios from 'axios';

const API_BASE_URL = 'http://localhost:3000/support-chat';
const socket = io('http://localhost:3000', { transports: ['websocket', 'polling'] });

interface User {
  _id: string;
  name?: string;
  surname?: string;
}

interface Chat {
  _id: string;
  user: string;
}

interface Message {
  author: string;
  text: string;
}

const ChatManagerClients = () => {
  const [chats, setChats] = useState<Chat[]>([]);
  const [selectedChat, setSelectedChat] = useState<string | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [message, setMessage] = useState<string>('');
  const [managerName, setManagerName] = useState<string>('');
  const [clients, setClients] = useState<Record<string, string>>({});
  const [selectedClientName, setSelectedClientName] = useState<string>('');

  useEffect(() => {
    const fetchManager = async () => {
      const storedUserId = localStorage.getItem('userId');
      const storedToken = localStorage.getItem('token');
  
      console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π userId:", storedUserId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
  
      if (storedUserId && storedToken) {
        try {
          const response = await axios.get<User>(`http://localhost:3000/users/${storedUserId}`, {
            headers: { Authorization: `Bearer ${storedToken}` },
          });
  
          console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", response.data); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          setManagerName(`${response.data.name || ''} ${response.data.surname || ''}`.trim());
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
        }
      }
    };
    fetchManager();
  }, []);

  useEffect(() => {
    const fetchChats = async () => {
      try {
        const response = await axios.get<Chat[]>(API_BASE_URL);
        console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:", response.data); // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ userId –ø—Ä–∏—Ö–æ–¥—è—Ç
  
        setChats(response.data);
  
        const clientData = await Promise.all(
          response.data.map(async (chat) => {
            console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ userId=${chat.user}`); // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º userId
            
            if (!chat.user) return { id: chat.user, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' };
            
            try {
              const userResponse = await axios.get<User>(`http://localhost:3000/users/${chat.user}`);
              return { id: chat.user, name: `${userResponse.data.name || ''} ${userResponse.data.surname || ''}`.trim() };
            } catch (error) {
              return { id: chat.user, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' };
            }
          })
        );
  
        const clientMap: Record<string, string> = {};
        clientData.forEach(client => {
          if (client.id) {
            clientMap[client.id] = client.name;
          }
        });
  
        console.log("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:", clientMap); // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –∏–º–µ–Ω–∞
        setClients(clientMap);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
      }
    };
    fetchChats();
  }, []);

  useEffect(() => {
    if (!selectedChat) return;
  
    axios.get<Message[]>(`${API_BASE_URL}/${selectedChat}/messages`).then((response) => {
      setMessages(response.data);
    });
  
    // –ò—â–µ–º —á–∞—Ç –ø–æ –µ–≥–æ ID
    const chat = chats.find(c => c._id === selectedChat);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ `clients` –º–æ–∂–µ—Ç –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è)
    if (chat && clients[chat.user]) {
      console.log(`–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–¥—ë—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${clients[chat.user]}`); // üîç –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
      setSelectedClientName(clients[chat.user]);
    } else {
      setSelectedClientName('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
  }, [selectedChat, clients]);

  useEffect(() => {
    const messageHandler = (supportRequest: { _id: string }, newMessage: Message) => {
      if (supportRequest._id === selectedChat) {
        setMessages((prev) => [...prev, newMessage]);
      }
    };
    socket.on('message', messageHandler);
    return () => {
      socket.off('message', messageHandler);
    };
  }, [selectedChat]);

  const sendMessage = async () => {
    if (message.trim() && selectedChat) {
      try {
        const newMessage: Message = { author: managerName, text: message };
        setMessages((prev) => [...prev, newMessage]);
        await axios.post(`${API_BASE_URL}/${selectedChat}/messages`, newMessage);
        setMessage('');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
  };

  const deleteChat = async () => {
    if (!selectedChat) return;
    try {
      await axios.delete(`${API_BASE_URL}/${selectedChat}`);
      setChats((prev) => prev.filter(chat => chat._id !== selectedChat));
      setSelectedChat(null);
      setMessages([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
    }
  };

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      <div style={{ flex: 1, padding: '20px' }}>
        <h3>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤</h3>
        <ul>
          {chats.map(chat => (
          <li key={chat._id} onClick={() => {
            console.log(`–í—ã–±—Ä–∞–Ω —á–∞—Ç ${chat._id}, userId –∫–ª–∏–µ–Ω—Ç–∞: ${chat.user}`); // üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —á–∞—Ç–∞
            setSelectedChat(chat._id);
          }}>
            –ß–∞—Ç —Å {clients[chat.user] ? clients[chat.user] : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}
          </li>
          ))}
        </ul>
      </div>
      {selectedChat && (
        <div style={{ flex: 2, padding: '20px', borderLeft: '1px solid #ccc' }}>
          <h3>–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º {selectedClientName}</h3>
          <button onClick={deleteChat} style={{ marginBottom: '10px', backgroundColor: 'red', color: 'white' }}>
            –£–¥–∞–ª–∏—Ç—å —á–∞—Ç
          </button>
          <div style={{ height: '300px', overflowY: 'scroll', border: '1px solid #ccc' }}>
            {messages.map((msg, index) => (
              <p key={index}><strong>{msg.author}</strong>: {msg.text}</p>
            ))}
          </div>
          <input value={message} onChange={e => setMessage(e.target.value)} />
          <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
      )}
    </div>
  );
};

export default ChatManagerClients;