import React, { useState, useEffect } from 'react';
import axios from 'axios';
import type { AxiosResponse } from 'axios';

interface Booking {
  _id: string;
  hotelId?: string;
  roomId?: string;
  hotel?: { _id: string; title: string } | null;
  room?: { _id: string; title: string } | null;
  dateStart: string;
  dateEnd: string;
}

const ClientBookings = () => {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBookings = async () => {
      try {
        const userId = localStorage.getItem('userId');
        console.log("üîç userId:", userId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId –Ω–µ null

        if (!userId) {
          setError('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }

        const response = await axios.get<Booking[]>(`http://localhost:3000/reservations?userId=${userId}`);
        const reservations = response.data;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–µ–ª—è—Ö –∏ –Ω–æ–º–µ—Ä–∞—Ö
        const hotelRequests = reservations.map((booking) =>
          booking.hotelId ? axios.get(`http://localhost:3000/hotels/${booking.hotelId}`).catch(() => null) : null
        );
        const roomRequests = reservations.map((booking) =>
          booking.roomId ? axios.get(`http://localhost:3000/hotel-rooms/${booking.roomId}`).catch(() => null) : null
        );

        const hotelResponses = await Promise.all(hotelRequests);
        const roomResponses = await Promise.all(roomRequests);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const updatedBookings = reservations.map((booking, index) => ({
          ...booking,
          hotel: hotelResponses[index]?.data ?? null,
          room: roomResponses[index]?.data ?? null,
        }));

        console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", updatedBookings); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
        setBookings(updatedBookings);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
      } finally {
        setLoading(false);
      }
    };

    fetchBookings();
  }, []);

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p className="error-message">{error}</p>;
  if (bookings.length === 0) return <p>–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.</p>;

  return (
    <div className="bookings-container">
      <h2>–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
      <ul className="bookings-list">
        {bookings.map((booking) => (
          <li key={booking._id} className="booking-item">
            {booking.hotel && booking.room ? (
              <>
                <h3>{booking.hotel.title} - {booking.room.title}</h3>
                <p>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {new Date(booking.dateStart).toLocaleDateString()}</p>
                <p>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {new Date(booking.dateEnd).toLocaleDateString()}</p>
              </>
            ) : (
              <p className="error-message">–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.</p>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ClientBookings;